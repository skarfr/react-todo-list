
function getId(state) {
  // the reduce function runs for each values in the array todos, the following function with parameters: the previous return of the function (or -1) and the current value
  return state.todos.reduce((maxId /*previous value*/, todo /*current value*/) => {
      return Math.max(todo.id, maxId) // we basically get the higher existing todos.id
    }, -1) +1;                        // we add +1 to get the next one
}

/**
 * The Reducer contains the logic of each actions
 * it is possible to create multiple reducers function (1 for todos, 1 for other other... with CombineReducers
 * and all reducers will be called 1 after the other. That's why by default, we must return the existing state (so the next reducer can try to handle it)
 * @param state
 * @param action
 * @returns {*}
 */
let reducer =  function(state, action) {
  switch(action.type) {
    case 'ADD_TODO':
      return Object.assign(  // combines a bunch of objects into 1 object.
        {},           // {} means new object. So we will basically combine existing objects (state) with a new one. This way, we ensure that the reducer returns new states (and not replace existing one)
        state,        // the state prior to the action
        {             // The previous parameter (state) already got a list of todos. Object.assign will overwrite the existing one with the following parameter
          todos: [
            {
              text: action.text,
              completed: false,
              id: getId(state)
            },
            ...state.todos] // array of todos. We are adding 1 new todos to the list of existing todos (...state.todos)
        })

    case 'COMPLETE_TODO':
      return Object.assign({}, state,
        {
          todos: state.todos.map((todo) => {
            return todo.id === action.id ?
              Object.assign({}, todo, {completed: !todo.completed}) : todo //if true, this will return a new todos completed. We don't want to update the existing one, we always want to add a new one. If no, we just return the todos

          })
        })

    case 'DELETE_TODO':
      return Object.assign({}, state,
        {
          todos: state.todos.filter((todo) => {
            return todo.id !== action.id //if equal, then delete
          })
        })

    case 'CREATE_USER_ID':
      return Object.assign({}, state,
        {
          user: {
            username: state.user.username,
            id: action.id
          }
        }

      )

    default:
      return state;
  }
}

export default reducer